version: 2.1
jobs:
  # Build the site to store artifacts
  demo_site:
    docker:
      - image: circleci/ruby:2.6
    steps:
      # Attach the built markdown files
      - checkout
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/workspace

      # Copy over the built markdown files
      - copy_built_files

      # Build the site's HTML w/ the base_url for CircleCI artifacts
      - build_site:
          build_args: --baseurl /0/html/

      # Tell Circle to store the documentation output in a folder that we can access later
      - store_artifacts:
          path: _site/
          destination: html

      - store_artifacts:
          path: _build
          destination: _build

  build_book:
    docker:
      - image: circleci/python:3.6-stretch
    steps:
      # Get our data and merge with upstream
      - run: sudo apt-get update
      - run: 
         name: install jupyter book
         command: pip install --user git+https://github.com/jupyter/jupyter-book.git 
         
      # Update our path
      - run: echo "export PATH=~/.local/bin:$PATH" >> $BASH_ENV
      
      - checkout

      # Build the site itself
      - run:
          name: Build site markdown
          command: make book 

      # Persist the specified paths (see https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs)
      - persist_to_workspace:
          root: .
          paths:
            - _build/



# Tell CircleCI to use this workflow when it builds the site
workflows:
  version: 2
  default:
    jobs:
      - build_book:
          filters:
            branches:
              ignore:
                - gh-pages
      - demo_site:
          requires:
            - build_book
          filters:
            branches:
              ignore:
                - gh-pages

commands:
  copy_built_files:
    description: "Copy the build site files so we can build the HTML"
    steps:
      # Grab the the built markdown from the last step
      - run:
          name: Copy over built site files
          command: |
            rm -rf _build
            cp -r /tmp/workspace/_build .

  build_site:
    description: "Build the site with Jekyll"
    parameters:
      build_args:
        type: string
        default: ""
    steps:
      - checkout
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-

      - run: gem install bundler
      - run: bundle install

      # Store bundle cache
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Build the website
          command: bundle exec jekyll build << parameters.build_args >>
